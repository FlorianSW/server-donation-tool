app:
  port: 8080
  # Secret used to sign the client-side session cookie (with which the session of the user is identified). Generate
  # a secure string of reasonable length.
  sessionSecret:
  # Configuration for the session store. The default values should generally be good enough.
  sessionStore:
    # The filename where the session database should be saved to. The only included session store is sqlite3 (which eases
    # the setup) and saves the data in a database file. Multiple app instances are still able to read and write from the
    # store.
    filename: ./sessions.sqlite
  # Defines if the app should compress responses itself. This option should generally be enabled, unless you plan to serve
  # traffic to the app using a reverse proxy which is doing the compression on-the-fly.
  compressResponse: true
  # Optional customisation of the website
  community:
    # The title will be shown in the top navigation bar as well as in the title of the page (visible in the tab or window name)
    title: our community
    # An optional logo, which is used as an icon in the top navigation bar. Place the file into the /src/assets/custom folder
    # and simply name the file here (without the path).
    logo:
    # The discord invite link of your community. Will be listed in the footer and might be helpful in case the donator as an
    # issue they want to discuss with you.
    discord:
discord:
  # The OAuth credentials of the application (https://discord.com/developers/applications) used to sign users in. You
  # find these values in the app settings in the section 'OAuth2' -> 'Client information'
  # The value needs to be a string (wrapped in ').
  clientId:
  clientSecret:
  # The absolute redirect URL of your website. Should be the public facing URL of your website ending on /auth/discord/callback
  redirectUrl: '/auth/discord/callback'
  # Optional settings for Discord bot actions. Configuring this section is needed when you want to offer Discord related
  # perks to your donators.
  bot:
    # The token of the discord app to use to manage your discord related perks in your discord server. It may or may not
    # be the same discord bot you use for your users to login to this website. The discord bot needs to have a bot user
    # in your discord server. In order to provide the bot user the necessary permissions, make sure to at least select the
    # following permissions when inviting the bot into your server:
    # - Manage Roles
    # After you invited the bot, make sure it holds at least one role, which is ranked higher then the highest role of
    # the possible donators of that tool. If you fail to do that, your users will not get the discord perks you offer.
    #
    # The bot user will also use privileged gateway intents, which need to be allowed in the developer portal for that specific
    # bot user. For that, go to your app in the Discord Developer portal -> Bot -> Privileged Gateway Intents. Activate at least the
    # "Server Members Intent". The bot uses this intent in order to track manual roles assignment and removal of roles which
    # would otherwise be managed by this tool.
    # You may want to look into https://github.com/FlorianSW/cftools-server-donation/issues/2 to get more information about
    # how and why this tool uses this intent.
    token:
    # The ID of the Discord server (Guild) your perks should be applied to. You can retrieve this ID with the following steps:
    # - Open your discord and click on the little cog item next to your user in the bottom left
    # - Go to the App Settings -> Advanced section
    # - Enable the developer mode
    # - Go back to the main Discord view (with all your servers)
    # - Right-click on the server you want to have managed by this website
    # - Click 'Copy ID' (should be the last option)
    # The ID is now in your clipboard, simply paste it here and wrap it with ''.
    # The value needs to be a string (wrapped in ').
    guildId:
  # Optional notifications from the website to your discord. During the process of donating, the tool emits events for
  # specific actions and errors, which you can opt in to get a notification into a discord channel using a webhook. The
  # webhook DOES NOT necessarily need to be in the same discord server your other discord settings relate to (e.g. the
  # bot.guildId). You can even create multiple notification rules to, e.g., route one type to another channel as another
  # type (or split errors from successful donations to add an alert rule for one channel).
  # Make sure that you properly protect the channel you send notifications to. Nearly every message type contains
  # information that are not supposed to be seen by the public (e.g. the transaction ID of a specific donation, the
  # identifiers of the donator like the Steam ID and discord username).
  notifications:
    # he webhook URL to send notifications to (see https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks
    # for how to setup a webhook)
    - webhookUrl:
      # A list of types to send notifications for. This list shows all currently available types.
      types:
        # Send when the payment was successfully processed by PayPal (the transaction is completed), but before the donator
        # redeemed their perks.
        - DONATED
        # Send whenever a donator redeems perks of a package after the donation. This event may occur more often then
        # the number of donations the donator made.
        - SUCCESSFUL_REDEEM
        # Send whenever a perk of a package could not be redeemed (the error message will contain more information on
        # what happened)
        - REDEEM_ERROR
steam:
  # The absolute redirect URL of your website. Should be the public facing URL of your website ending on /auth/steam/callback
  redirectUrl: '/auth/steam/callback'
  # The base URL of your website, including protocol and port. If your Redirect URL looks like 'https://example.com/auth/steam/callback'
  # then your realm should look like 'http://example.com'
  realm: http://localhost:8080
  # Your steam api key from https://steamcommunity.com/dev/apikey
  apiKey: 5AFD5B0031A3830FE62D52520EAE77C4
paypal:
  # The access credentials of your PayPal application to process payments. You can either use the sandbox credentials
  # to test the application. In order to process real funds, you need to have a paypal business account and use
  # credentials of a live app.
  # You can create these in the PayPal developer portal: https://developer.paypal.com/developer/applications/
  clientId:
  clientSecret:
cftools:
  # Credentials of a CFTools application from https://developer.cftools.cloud/applications
  # Make sure you have granted this app permission to all servers listed in the perks section (cftools.serverApiId) in
  # order to allow the website to manage the priority queue entries.
  applicationId:
  secret:
# A mapping between serverApiId and a human readable server name. This information is used on the overview page where
# a potential donator sees the servers they have priority queue already. I suggest to use a name your donators will
# easily recognize.
serverNames:
  aServerApiId: some name
# Packages are the available prices and benefits a donator gets when donating that amount. Each perk has the following information
# - name: A human readable name, which is displayed in the perk selection screen as well as on the PayPal receipt (choose
#   a name which is not too long, but still descriptive); do not put the price in it
# - id: A unique id over the lifetime of the website. It needs to be unique even _after_ you want to remove the perk.
#   Do not re-use an ID from a previous perk. The easiest thing would be to simply count up by one. Needs to be a number
#   and will also be available in your PayPal dashboard in the 'custom' reference.
# - price: The price of the perk, as an object of currency and amount. The currency needs to be a supported string from
#   PayPal (see https://developer.paypal.com/docs/reports/reference/paypal-supported-currencies/). The amount is a
#   string (make sure to quote the value) with a number with two decimals.
# - perks: Each perk describes a specific benefit a donator earns. A perk consists of the following mandatory configuration:
#   * type: The type of the perk. The only currently supported value is PRIORITY_QUEUE. The value is currently unused.
#   Each perk may have additional configuration, see the below list of available perks for more details.
#
# You should have at least one perk available, and as many as you want to have.
#
# Available perks:
#
# - PRIORITY_QUEUE
# This perk provides a specific amount of days of priority queue for one server, which needs to be registered in CFTools
# Cloud. It requires the following configuration:
# * amountInDays: The amount of priority queue days the donator should get.
# * cftools: The cftools serverApiId (in the object with the key serverApiId) of the server the donator will get the perk
#   for. Is the server api ID of the server in the CFTools Dashboard (Manage -> Settings -> API Key section).
#   This setting is only used for the following types: PRIORITY_QUEUE
#
# - DISCORD_ROLE
# A perk which will grant the donator one or more specific roles in your discord server (see the discord.bot settings for
# detailed information on how to setup and configure your discord bot correctly). This perk requires the following
# configuration:
# * roles: An array of discord role IDs (NOT names) to assign when the donation succeeded. You can retrieve the role IDs
#   the same way as you did with the guild ID, just right click on the role you want to assign to a donator to copy the ID
#   from the context menu.
#
# - FREETEXT_ONLY
# A perk that is not managed by this application. This website is basically not provisioning anything for the donator
# when the donation is done. This perk is mainly meant to mention perks the donator earns, which will be handled/granted
# in another way then with this website. There's only one configuration option, which is the text that will be shown to
# the donator:
# * text: The text to show to the donator. There's no strict length limitation, however, for the sake of simplicity and
#   ease of use, you should try to keep it short (other than this documentation ;)).
packages:
  - name: Allpass
    id: 1
    price:
      currency: USD
      amount: '1.00'
    perks:
      - type: PRIORITY_QUEUE
        amountInDays: 30
        cftools:
          serverApiId:
      - type: DISCORD_ROLE
        roles:
          # These values need to be strings (wrapped in ').
          # Donator
          - '0000000000000'
          # DayZ
          - '1111111111111'
      - tpye: FREETEXT_ONLY
        text: Some text to show to the donator
  - name: Fastpass
    id: 2
    price:
      currency: USD
      amount: '1.00'
    perks:
      - type: PRIORITY_QUEUE
        amountInDays: 30
        cftools:
          serverApiId:
