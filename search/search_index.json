{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Server donation tool This server donation tool is meant to make it easier for gaming communities to allow their members to donate and earn differnet perks for their donation. It seamlessly integrates with different platforms in order to automatically provision and setup perks for donators to reduce manual efforts for community admins and moderators. A demo deployment of the tool can be found here: https://donate-demo.go2tech.de/ Key Features Self-services, guided donation on a modern website Integrated with PayPal for easy, self-service and secure payments Fully configurable packages, including configuring perks a donator earns, and the amount one needs to donate Perks available: Priority Queue (based on CFTools Cloud), Discord roles Discord notifications Installation & Configuration The config.full.yml provides extensive documentation for each configuration option. With the config.example.yml , there is a minimum configuration file, where you just need to replace the placeholder values to get started (it does not contain all the possible configuration values). Additionally, the Getting Started Guide will provide an easy-to-use step-by-step guide for a first-time setup. Support and Collaboration If you have a question regarding the use or the setup of this tool, feel free to join my Discord and get the Tools role in the #get-your-roles-here channel. I'll be happy to assist you if I can with your question there :) The initial configuration of the tool might look a bit overwhelming, but I'm happy to help you with whatever problem you're facing, just contact me. Given you think you found a bug, a missing feature or something that can be improved, I encourage you to open an issue in this Github repository . Please, do not use issues for your questions or for getting support. Given you're a developer and want to contribute code to this project, feel free to do so. Simply fork the project, make your code changes and open a pull request against this repository. I appreciate your help and support and will try to review your pull request as soon as I can.","title":"Home"},{"location":"#server-donation-tool","text":"This server donation tool is meant to make it easier for gaming communities to allow their members to donate and earn differnet perks for their donation. It seamlessly integrates with different platforms in order to automatically provision and setup perks for donators to reduce manual efforts for community admins and moderators. A demo deployment of the tool can be found here: https://donate-demo.go2tech.de/","title":"Server donation tool"},{"location":"#key-features","text":"Self-services, guided donation on a modern website Integrated with PayPal for easy, self-service and secure payments Fully configurable packages, including configuring perks a donator earns, and the amount one needs to donate Perks available: Priority Queue (based on CFTools Cloud), Discord roles Discord notifications","title":"Key Features"},{"location":"#installation-configuration","text":"The config.full.yml provides extensive documentation for each configuration option. With the config.example.yml , there is a minimum configuration file, where you just need to replace the placeholder values to get started (it does not contain all the possible configuration values). Additionally, the Getting Started Guide will provide an easy-to-use step-by-step guide for a first-time setup.","title":"Installation &amp; Configuration"},{"location":"#support-and-collaboration","text":"If you have a question regarding the use or the setup of this tool, feel free to join my Discord and get the Tools role in the #get-your-roles-here channel. I'll be happy to assist you if I can with your question there :) The initial configuration of the tool might look a bit overwhelming, but I'm happy to help you with whatever problem you're facing, just contact me. Given you think you found a bug, a missing feature or something that can be improved, I encourage you to open an issue in this Github repository . Please, do not use issues for your questions or for getting support. Given you're a developer and want to contribute code to this project, feel free to do so. Simply fork the project, make your code changes and open a pull request against this repository. I appreciate your help and support and will try to review your pull request as soon as I can.","title":"Support and Collaboration"},{"location":"discord-commands/","text":"OAuth2 permissions: scope applications.commands","title":"Discord commands"},{"location":"discord-notifications/","text":"Discord notifications The server donation tool is helping your donators to donate to your community and get rewards for that quicker and in a self service without you getting involved in this process. However, that also means, that you loose insights in what packages your donators like to donate for and how many donations you get. You could use the PayPal transaction history for that, however, it might contain donation-unrelated charges and incoming funds as well, which makes this approach not feasible. Additionally, a pure transaction history does not give you insights into possible problems that may occur when a donator redeems the perks of a package. Discord notifications is an optional functionality of the server donation tool to help you gather all these insights easily. Core concept You can configure the server donation tool to send a notification to one or more discord channels with all required information for the specified event. The notification is sent to the configured Discord webhook. Webhooks are an easy to setup way to send arbitrary messages to a Discord channel. See the official webhook documentation in the Discord documentation to find out more. Setup Available notification types The following notification types are currently available in the tool. Please also ensure you send the message contents to appropriate channels. For example, notification types that contain personal identifiable information are most likely not supposed to be published into a public channel. You can configure multiple notifications, which take different (or even the same) notification types. Type Event Information DONATED_PUBLIC Same as `DONATED` with the difference that it is aimed to be send to a public discord channel. By default only the Discord username (and tag) is used. Server owners can overwrite the `NOTIFICATIONS_PAYMENT_SUCCESSFUL_PUBLIC_DESCRIPTION` message and use the following variables additionally: `username`, `userId`, `package`, `price`. DONATED A donator successfully donated (donation is processed and confirmed by PayPal). Order ID, PayPal Order ID, PayPal Transaction ID, Donator Discord and Steam ID, Donated for package, Order creation date SUCCESSFUL_REDEEM A donator redeemed the perks of a package. This notification can be sent multiple times for a single donation. SUCCESSFUL_REFUND A donation was refunded by the payment provider. Perks granted by the donation were rolled back if possible. REDEEM_ERROR A donator tried to redeem perks for their package and there was an error. This notification might occur multiple times for the same donation, one for each errored perk. REFUND_ERROR It was tried to rollback a perk granted to a donator after the donation was refunded, but the refund of that perk failed. SUBSCRIPTION_ACTIVATED A donator subscribed to a package. Subscription ID, Subscription Plan ID, PayPal Subscription ID, PayPal Plan ID, PayPal Product ID, Donator Discord and Steam ID, Package the donator subscribed to SUBSCRIPTION_CANCELLED A donator cancelled a subscription. SUBSCRIPTION_EXECUTED A payment was made as part of a recurring subscription. This event will come together with the `SUCCESSFUL_REDEEM` event. Subscription ID, Subscription Plan ID, PayPal Subscription ID, PayPal Plan ID, PayPal Product ID, Order ID, PayPal Order ID, PayPal Transaction ID, Donator Discord and Steam ID, Package the donator subscribed to Preparation In order to configure the notifications, you need to first create an incoming webhook URL for the channel(s) where you want to receive discord notifications. See the discord webhook documentation to find more info on how to do that. Write down the webhook URL(s) for the next steps. Configure the notifications Open the config.yml file in your favourite text editor. Find the configuration key discord and check if there is a child-key named notifications already. If not, create one. Your configuration should now look similar to this one (unnecessary parts are removed): # ... discord: # ... notifications: # ... You can now add one configuration block per unique webhook URL (one webhook URL per channel) with the following options: - webhookUrl : The Discord webhook URL where the notifications should be sent - types : A list of notification types to sent to this channel (see the list above) For example, you may want to configure something similar to: # ... discord: # ... notifications: # Might go to #donation-feed - webhookUrl: https://discord.com/webhook/... types: - DONATED - SUCCESSFUL_REDEEM # might go to #donation-errors - webhookUrl: https://discord.com/webhook/... types: - REDEEM_ERROR # ...","title":"Discord Notifications"},{"location":"discord-notifications/#discord-notifications","text":"The server donation tool is helping your donators to donate to your community and get rewards for that quicker and in a self service without you getting involved in this process. However, that also means, that you loose insights in what packages your donators like to donate for and how many donations you get. You could use the PayPal transaction history for that, however, it might contain donation-unrelated charges and incoming funds as well, which makes this approach not feasible. Additionally, a pure transaction history does not give you insights into possible problems that may occur when a donator redeems the perks of a package. Discord notifications is an optional functionality of the server donation tool to help you gather all these insights easily.","title":"Discord notifications"},{"location":"discord-notifications/#core-concept","text":"You can configure the server donation tool to send a notification to one or more discord channels with all required information for the specified event. The notification is sent to the configured Discord webhook. Webhooks are an easy to setup way to send arbitrary messages to a Discord channel. See the official webhook documentation in the Discord documentation to find out more.","title":"Core concept"},{"location":"discord-notifications/#setup","text":"","title":"Setup"},{"location":"discord-notifications/#available-notification-types","text":"The following notification types are currently available in the tool. Please also ensure you send the message contents to appropriate channels. For example, notification types that contain personal identifiable information are most likely not supposed to be published into a public channel. You can configure multiple notifications, which take different (or even the same) notification types. Type Event Information DONATED_PUBLIC Same as `DONATED` with the difference that it is aimed to be send to a public discord channel. By default only the Discord username (and tag) is used. Server owners can overwrite the `NOTIFICATIONS_PAYMENT_SUCCESSFUL_PUBLIC_DESCRIPTION` message and use the following variables additionally: `username`, `userId`, `package`, `price`. DONATED A donator successfully donated (donation is processed and confirmed by PayPal). Order ID, PayPal Order ID, PayPal Transaction ID, Donator Discord and Steam ID, Donated for package, Order creation date SUCCESSFUL_REDEEM A donator redeemed the perks of a package. This notification can be sent multiple times for a single donation. SUCCESSFUL_REFUND A donation was refunded by the payment provider. Perks granted by the donation were rolled back if possible. REDEEM_ERROR A donator tried to redeem perks for their package and there was an error. This notification might occur multiple times for the same donation, one for each errored perk. REFUND_ERROR It was tried to rollback a perk granted to a donator after the donation was refunded, but the refund of that perk failed. SUBSCRIPTION_ACTIVATED A donator subscribed to a package. Subscription ID, Subscription Plan ID, PayPal Subscription ID, PayPal Plan ID, PayPal Product ID, Donator Discord and Steam ID, Package the donator subscribed to SUBSCRIPTION_CANCELLED A donator cancelled a subscription. SUBSCRIPTION_EXECUTED A payment was made as part of a recurring subscription. This event will come together with the `SUCCESSFUL_REDEEM` event. Subscription ID, Subscription Plan ID, PayPal Subscription ID, PayPal Plan ID, PayPal Product ID, Order ID, PayPal Order ID, PayPal Transaction ID, Donator Discord and Steam ID, Package the donator subscribed to","title":"Available notification types"},{"location":"discord-notifications/#preparation","text":"In order to configure the notifications, you need to first create an incoming webhook URL for the channel(s) where you want to receive discord notifications. See the discord webhook documentation to find more info on how to do that. Write down the webhook URL(s) for the next steps.","title":"Preparation"},{"location":"discord-notifications/#configure-the-notifications","text":"Open the config.yml file in your favourite text editor. Find the configuration key discord and check if there is a child-key named notifications already. If not, create one. Your configuration should now look similar to this one (unnecessary parts are removed): # ... discord: # ... notifications: # ... You can now add one configuration block per unique webhook URL (one webhook URL per channel) with the following options: - webhookUrl : The Discord webhook URL where the notifications should be sent - types : A list of notification types to sent to this channel (see the list above) For example, you may want to configure something similar to: # ... discord: # ... notifications: # Might go to #donation-feed - webhookUrl: https://discord.com/webhook/... types: - DONATED - SUCCESSFUL_REDEEM # might go to #donation-errors - webhookUrl: https://discord.com/webhook/... types: - REDEEM_ERROR # ...","title":"Configure the notifications"},{"location":"donation-targets/","text":"Donation Targets Most communities, which are operating services like game servers, use donations in order to cover their monthly cost and expenses. Such cost can include server rental cost, website operations, software licenses and third-party services, and can easily add up to multiple hundreds of dollars each month. In order to better communicate to your community that you rely on the donations to provide these services, you can use a feature called donation targets. Core Concept A donation target within the server donation tool is a defined amount of money which you aim to target in a specified timeframe. The server donation tool allows you to configure this target amount and the timeframe (e.g. monthly) and will add up each donation within the timespan to compare it to the set target. Currently, the server donation tool supports a recurring monthly donation target only. It will automatically add up each donation within one month (starting from the 1st of the month at midnight until the end of the month at 23:59), each month from the start again. You can configure the target of this monthly timespan. Setup To set up a donation target, there is the donationTarget configuration key beneath the app.community configuration keys. It takes an object with the required and optional configuration options. Configure the donation target The only required configuration as of now is the donation target itself. Once set, the donation tool will automatically use the tracked donations to calculate the progress to reach this target. To configure the target, you need to set the monthly configuration key within the donationTarget configuration. The type is a number, which can also take decimals. If you choose to use a decimal, make sure you use to 2 decimal points. Example: app: # ... community: #... donationTarget: monthly: 50.00 In this example, a donation target of 50 is configured. Make sure you do not include a currency, the currency is automatically inferred from your package prices. Once you restarted the server donation tool, it will automatically show a donation target view on the start page. Configure the Discord mirror Additionally, to the donation target progress view on the donation tool website itself, you can choose to mirror the donation progress to your Discord server. Once configured, the donation tool will automatically add a message to the configured Discord channel, containing the current donation target progress. It will also automatically update the message whenever a donation is made. Caveats: - Ensure that the configured Discord Bot user is allowed to write to the configured discord channel - It needs the permission to create/send messages in the channel - It also needs the permission to update its own messages - Currently, only the last 100 messages are inspected to find the already sent message of the donation tool. Ensure that the channel, where the message is sent, will not exceed this limit, otherwise the donation tool may create a new message, which might not be intended. - A good practice is to prevent your community members to write to this channel at all In order to enable the Discord mirror of the donation target, you need the channel ID of the Discord channel where the message should be written to. To get this ID, enable the Discord Developer mode in your Discord client (refer to the Getting Started guide , section Discord Bot user to find detailed steps on how to do that). Then, right-click on the channel you want to write the donation progress message to and click on Copy ID . Write down this ID, you'll need it in the configuration part, which comes next. The configuration of the discord mirror is done in the same donationTarget configuration object as the target itself. Set the configuration option discordChannelId to the ID of the channel you copied before. Make sure you escape the channel ID with single ( ' ) or double ( \" ) quotes, as it is a numeric value. Example: app: # ... community: #... donationTarget: monthly: 50.00 discordChannelId: '11111111111111' With this example configuration, the donation tool would mirror the donation target progress as a message into the Discord channel with the ID 11111111111111 .","title":"Donation Targets"},{"location":"donation-targets/#donation-targets","text":"Most communities, which are operating services like game servers, use donations in order to cover their monthly cost and expenses. Such cost can include server rental cost, website operations, software licenses and third-party services, and can easily add up to multiple hundreds of dollars each month. In order to better communicate to your community that you rely on the donations to provide these services, you can use a feature called donation targets.","title":"Donation Targets"},{"location":"donation-targets/#core-concept","text":"A donation target within the server donation tool is a defined amount of money which you aim to target in a specified timeframe. The server donation tool allows you to configure this target amount and the timeframe (e.g. monthly) and will add up each donation within the timespan to compare it to the set target. Currently, the server donation tool supports a recurring monthly donation target only. It will automatically add up each donation within one month (starting from the 1st of the month at midnight until the end of the month at 23:59), each month from the start again. You can configure the target of this monthly timespan.","title":"Core Concept"},{"location":"donation-targets/#setup","text":"To set up a donation target, there is the donationTarget configuration key beneath the app.community configuration keys. It takes an object with the required and optional configuration options.","title":"Setup"},{"location":"donation-targets/#configure-the-donation-target","text":"The only required configuration as of now is the donation target itself. Once set, the donation tool will automatically use the tracked donations to calculate the progress to reach this target. To configure the target, you need to set the monthly configuration key within the donationTarget configuration. The type is a number, which can also take decimals. If you choose to use a decimal, make sure you use to 2 decimal points. Example: app: # ... community: #... donationTarget: monthly: 50.00 In this example, a donation target of 50 is configured. Make sure you do not include a currency, the currency is automatically inferred from your package prices. Once you restarted the server donation tool, it will automatically show a donation target view on the start page.","title":"Configure the donation target"},{"location":"donation-targets/#configure-the-discord-mirror","text":"Additionally, to the donation target progress view on the donation tool website itself, you can choose to mirror the donation progress to your Discord server. Once configured, the donation tool will automatically add a message to the configured Discord channel, containing the current donation target progress. It will also automatically update the message whenever a donation is made. Caveats: - Ensure that the configured Discord Bot user is allowed to write to the configured discord channel - It needs the permission to create/send messages in the channel - It also needs the permission to update its own messages - Currently, only the last 100 messages are inspected to find the already sent message of the donation tool. Ensure that the channel, where the message is sent, will not exceed this limit, otherwise the donation tool may create a new message, which might not be intended. - A good practice is to prevent your community members to write to this channel at all In order to enable the Discord mirror of the donation target, you need the channel ID of the Discord channel where the message should be written to. To get this ID, enable the Discord Developer mode in your Discord client (refer to the Getting Started guide , section Discord Bot user to find detailed steps on how to do that). Then, right-click on the channel you want to write the donation progress message to and click on Copy ID . Write down this ID, you'll need it in the configuration part, which comes next. The configuration of the discord mirror is done in the same donationTarget configuration object as the target itself. Set the configuration option discordChannelId to the ID of the channel you copied before. Make sure you escape the channel ID with single ( ' ) or double ( \" ) quotes, as it is a numeric value. Example: app: # ... community: #... donationTarget: monthly: 50.00 discordChannelId: '11111111111111' With this example configuration, the donation tool would mirror the donation target progress as a message into the Discord channel with the ID 11111111111111 .","title":"Configure the Discord mirror"},{"location":"getting-started/","text":"Getting Started Guide Using this tool to convert a manual donation process to a self-service experience requires some steps. This guide aims to translate the documentation of the single configuration options in the config.example.yml configuration file to an actionable step-by-step guide to get started with an initial setup. This guide sets up the donation website in a basic, working fashion. You still might want to take a look into more advanced setup scenarios (see more documentation pieces in the docs folder). Pre-requisites To install this donation tool has the following minimum requirements: A Windows, MacOS or Linux operating system some basic knowledge using a terminal/shell some basic knowledge using yaml/a text editor NodeJS + npm (NodeJS 16.6 or higher) installed One of the supported payment providers: (to process payments) PayPal business account Stripe.com a Discord account (Optional) a CFTools Cloud account and registered server (needed when offering a priority queue perk) (Optional) a Discord server (needed when offering a Discord roles perk) A domain is highly recommended, however, opening the website using the computers/servers IP address works fine as well Installation Note : The guide will use command syntax as it is used on Windows operating systems. You may need to translate/convert the commands to be used on MacOS or Linux systems. Installing the donation tool is the first step you should do. For that, you need to download the source code of the application itself. You can either use git to clone the repository, or alternatively download the latest version as a zip file. Clone or unzip the files to a directory of your choice. As of in this guide, the location of the source code will be referred as C:\\apps\\cftools-server-donation . Installing dependencies After downloading the source code, you need to get the dependencies used by the donation tool. For that, open a new Terminal window: press [WIN] + [R] type cmd hit [ENTER] Navigate to the downloaded source code: cd C:\\apps\\cftools-server-donation Install dependencies: npm ci (this may take a bit of time depending on your internet connection) Setup dependent accounts Payment processor See the respective documentation for the payment processor of your choice on how to setup an account. PayPal Stripe.com Discord login The donation tool requires a login through discord. I choose this login method, as most gaming communities will already have a discord server, which is connected to their community and therefore accepted the most. To setup this loign through Discord, you'll need to create an application in the developer portal of Discord. To do so, follow these steps: Open the Discord developer portal in your internet browser Create a new or open an existing application Navigate to the application by clicking on the name On the left side, open the OAuth2 section Note down the CLIENT ID and CLIENT SECRET values, you'll need these values in the \"Configuration\" section In the Redirects list of URLs, add a new URL and put in your redirect URL The redirect URL consists of the Domain you own (e.g. example.com), or the IP address of the server, whatever you choose It needs to be the domain/URL your donators will use to access the donation tool website later on (including the correct protocol, like http/https) Additionally, add /auth/discord/callback to it The full redirect URL might look like: https://example.com/auth/discord/callback Save the changes and continue CFTools Note : If you do not want to offer a Priority Queue perk, you can skip this section. You may use CFTools Cloud to manage and grant priority queue access to your donators and want to use this donation tool to make the whole process of donating and setting up the priority queue an automatic self-service experience. For that, this donation tool requires some grants to manage the priority queue entries on your behalf. As for Discord and PayPal, this is done by setting up a developer application, which you can setup using the following steps: Open the CFTools developer portal Create a new application (or use an existing one) Open the application by clicking on it Note down the Application Id and Secret value, you'll need these values in the \"Configuration\" section Copy the Grant URL and open it in a new browser tab/window Login to your CFTools account if requested You'll see a list of resources you have access to, which you can grant access to for the new application Select at least the server resources where you want to offer priority queue perks for Click the Grant access button to grant the access Discord Bot user Note : If you do not want to offer a Discord role perk, you can skip this section. In order for this donation tool to be able to redeem discord role related perks (granting the donator a specific role in your discord sever), it needs additional permissions and setup. You need to create a bot user, which is invited into the discord server you want to have the roles assigned to donators. You can setup the bot by following these steps: Open the Discord developer portal in your internet browser Open the app you created in the \"Discord login\" step You could also create a new application to separate the login from the role management if you want to Click on the Bot section in the left side navigation If not already done: Add a bot user to your application by clicking the Add Bot button Copy the value TOKEN and note it down, you'll need this value in the \"Configuration\" section Scroll down to the Privileged Gateway Intents section Enable the SERVER MEMBER INTENT by switching the toggle to on Click on the OAuth2 section in the left side navigation Scroll down to the OAuth2 URL Generator section on that page Select the bot scope in the SCOPES selection list In the BOT PERMISSIONS list under the SCOPES list, select at least the Manage Roles You may also choose to grant the Administrator permission if you like, however, this is not really needed and you should avoid granting permissions to bots and identifies when they do not need them Copy the URL at the bottom of the SCOPES list and open it in a new browser tab/window Select the Discord server where you want to have roles managed by the donation tool and click Authorize In addition to the bot setup itself, you'll need the Guild ID of the Discord server where you just added your Discord bot to. To retrieve this ID, follow these steps: Open your Discord app click on the little cog item next to your user in the bottom left Go to the App Settings -> Advanced section Enable the developer mode Go back to the main Discord view (with all your servers) Right-click on the server you want to have managed by this donation tool Click Copy ID Paste this ID somewhere and note it down, you'll need it in the \"Configuration\" section Configuration You're now set and should have all the required information to configure the donation tool and start it up the first time. To configure the tool, follow these steps: Copy the config.example.yml file to config.yml in the root directory of your source code ( C:\\apps\\cftools-server-donation ) Open the config.yml file in your favourite text editor (preferably one which supports YAML syntax highlighting which will greatly improve your ability to change the config) You should now go through each of the configuration options and fill them out with the information you gathered above If you do not have a value for one of the configuration, remove it, or keep the default value, if it has one Also, take a look into the comments of the configuration option, which may give additional details and context to what this option does and if you should change it Start the tool Once you've done the above setup and steps, you can go ahead and start the donation tool. For that: press [WIN] + [R] type cmd hit [ENTER] Navigate to the downloaded source code: cd C:\\apps\\cftools-server-donation Start the tool: npm start It will now be served from the configured port :)","title":"Getting Strated"},{"location":"getting-started/#getting-started-guide","text":"Using this tool to convert a manual donation process to a self-service experience requires some steps. This guide aims to translate the documentation of the single configuration options in the config.example.yml configuration file to an actionable step-by-step guide to get started with an initial setup. This guide sets up the donation website in a basic, working fashion. You still might want to take a look into more advanced setup scenarios (see more documentation pieces in the docs folder).","title":"Getting Started Guide"},{"location":"getting-started/#pre-requisites","text":"To install this donation tool has the following minimum requirements: A Windows, MacOS or Linux operating system some basic knowledge using a terminal/shell some basic knowledge using yaml/a text editor NodeJS + npm (NodeJS 16.6 or higher) installed One of the supported payment providers: (to process payments) PayPal business account Stripe.com a Discord account (Optional) a CFTools Cloud account and registered server (needed when offering a priority queue perk) (Optional) a Discord server (needed when offering a Discord roles perk) A domain is highly recommended, however, opening the website using the computers/servers IP address works fine as well","title":"Pre-requisites"},{"location":"getting-started/#installation","text":"Note : The guide will use command syntax as it is used on Windows operating systems. You may need to translate/convert the commands to be used on MacOS or Linux systems. Installing the donation tool is the first step you should do. For that, you need to download the source code of the application itself. You can either use git to clone the repository, or alternatively download the latest version as a zip file. Clone or unzip the files to a directory of your choice. As of in this guide, the location of the source code will be referred as C:\\apps\\cftools-server-donation .","title":"Installation"},{"location":"getting-started/#installing-dependencies","text":"After downloading the source code, you need to get the dependencies used by the donation tool. For that, open a new Terminal window: press [WIN] + [R] type cmd hit [ENTER] Navigate to the downloaded source code: cd C:\\apps\\cftools-server-donation Install dependencies: npm ci (this may take a bit of time depending on your internet connection)","title":"Installing dependencies"},{"location":"getting-started/#setup-dependent-accounts","text":"","title":"Setup dependent accounts"},{"location":"getting-started/#payment-processor","text":"See the respective documentation for the payment processor of your choice on how to setup an account. PayPal Stripe.com","title":"Payment processor"},{"location":"getting-started/#discord-login","text":"The donation tool requires a login through discord. I choose this login method, as most gaming communities will already have a discord server, which is connected to their community and therefore accepted the most. To setup this loign through Discord, you'll need to create an application in the developer portal of Discord. To do so, follow these steps: Open the Discord developer portal in your internet browser Create a new or open an existing application Navigate to the application by clicking on the name On the left side, open the OAuth2 section Note down the CLIENT ID and CLIENT SECRET values, you'll need these values in the \"Configuration\" section In the Redirects list of URLs, add a new URL and put in your redirect URL The redirect URL consists of the Domain you own (e.g. example.com), or the IP address of the server, whatever you choose It needs to be the domain/URL your donators will use to access the donation tool website later on (including the correct protocol, like http/https) Additionally, add /auth/discord/callback to it The full redirect URL might look like: https://example.com/auth/discord/callback Save the changes and continue","title":"Discord login"},{"location":"getting-started/#cftools","text":"Note : If you do not want to offer a Priority Queue perk, you can skip this section. You may use CFTools Cloud to manage and grant priority queue access to your donators and want to use this donation tool to make the whole process of donating and setting up the priority queue an automatic self-service experience. For that, this donation tool requires some grants to manage the priority queue entries on your behalf. As for Discord and PayPal, this is done by setting up a developer application, which you can setup using the following steps: Open the CFTools developer portal Create a new application (or use an existing one) Open the application by clicking on it Note down the Application Id and Secret value, you'll need these values in the \"Configuration\" section Copy the Grant URL and open it in a new browser tab/window Login to your CFTools account if requested You'll see a list of resources you have access to, which you can grant access to for the new application Select at least the server resources where you want to offer priority queue perks for Click the Grant access button to grant the access","title":"CFTools"},{"location":"getting-started/#discord-bot-user","text":"Note : If you do not want to offer a Discord role perk, you can skip this section. In order for this donation tool to be able to redeem discord role related perks (granting the donator a specific role in your discord sever), it needs additional permissions and setup. You need to create a bot user, which is invited into the discord server you want to have the roles assigned to donators. You can setup the bot by following these steps: Open the Discord developer portal in your internet browser Open the app you created in the \"Discord login\" step You could also create a new application to separate the login from the role management if you want to Click on the Bot section in the left side navigation If not already done: Add a bot user to your application by clicking the Add Bot button Copy the value TOKEN and note it down, you'll need this value in the \"Configuration\" section Scroll down to the Privileged Gateway Intents section Enable the SERVER MEMBER INTENT by switching the toggle to on Click on the OAuth2 section in the left side navigation Scroll down to the OAuth2 URL Generator section on that page Select the bot scope in the SCOPES selection list In the BOT PERMISSIONS list under the SCOPES list, select at least the Manage Roles You may also choose to grant the Administrator permission if you like, however, this is not really needed and you should avoid granting permissions to bots and identifies when they do not need them Copy the URL at the bottom of the SCOPES list and open it in a new browser tab/window Select the Discord server where you want to have roles managed by the donation tool and click Authorize In addition to the bot setup itself, you'll need the Guild ID of the Discord server where you just added your Discord bot to. To retrieve this ID, follow these steps: Open your Discord app click on the little cog item next to your user in the bottom left Go to the App Settings -> Advanced section Enable the developer mode Go back to the main Discord view (with all your servers) Right-click on the server you want to have managed by this donation tool Click Copy ID Paste this ID somewhere and note it down, you'll need it in the \"Configuration\" section","title":"Discord Bot user"},{"location":"getting-started/#configuration","text":"You're now set and should have all the required information to configure the donation tool and start it up the first time. To configure the tool, follow these steps: Copy the config.example.yml file to config.yml in the root directory of your source code ( C:\\apps\\cftools-server-donation ) Open the config.yml file in your favourite text editor (preferably one which supports YAML syntax highlighting which will greatly improve your ability to change the config) You should now go through each of the configuration options and fill them out with the information you gathered above If you do not have a value for one of the configuration, remove it, or keep the default value, if it has one Also, take a look into the comments of the configuration option, which may give additional details and context to what this option does and if you should change it","title":"Configuration"},{"location":"getting-started/#start-the-tool","text":"Once you've done the above setup and steps, you can go ahead and start the donation tool. For that: press [WIN] + [R] type cmd hit [ENTER] Navigate to the downloaded source code: cd C:\\apps\\cftools-server-donation Start the tool: npm start It will now be served from the configured port :)","title":"Start the tool"},{"location":"message-overrides/","text":"Customising messages The donation tool is prepared to use translations instead of english texts, only. The same system, that allows these translations in the future, can be used to overwrite specific texts in the tool with your own text. This comes in useful, when you have the requirement to show specific information at specific steps, or want to further customise the UI to your community. Overwriting message keys The donation tool uses a system of unique message keys, that are assigned to an individual place within the application. This key has a default message assigned, which will then presented to the user as the visible text. In order to customise/change a specific message in the tool, you simply overwrite the corresponding message key. Prepare overwriting message keys (one-time only) Follow these steps to enable message overwriting: Copy the string_overrides.example.yml file (in the root of the donation tool) Paste it to the root of the donation tool (next to the example file) Rename the file to string_overrides.yml That's it. When you restart the tool the next time, it will use the defined overrides. Specifying an override To override a specific key, e.g. the one which shows the title when the donator opens the website ( Donate ), do the following: Identify the key to overwrite (more details below), in this case, the key is INFO_TITLE Add this key to the messages object of the string_overrides.yml file Define the new value, e.g. My own text Save the file and restart the tool The resulting file should look like this: messages: INFO_TITLE: My own text Identifying the message key You can find all available/used message keys in the src/translations.ts file (see the messages object). Alternatively, given you know exactly the position/place of the message you want to edit, do the following: Open the config.yml file Add the language key to the app object and use the value qqx (see a full example below) Restart the application Open the website All messages should now, instead of showing their assigned texts, the message keys Navigate to the position of the message you want to overwrite and use the message key (inside the curly brackets) Once you're done, don't forget to delete the language configuration option and restart the app again Example config with the language property: app: port: 8080 sessionSecret: SOME_SECRET sessionStore: filename: ./sessions.sqlite compressResponse: true language: qqx # <- This is what you're looking for The message key you see will also optionally contain a list of parameter names passed to the message. When overwriting the message key, you can use these parameters as well, simply put them at the position you want them with: {{paramName}} . Where paramName is the name of the parameter you want to reference.","title":"Overwrite messages"},{"location":"message-overrides/#customising-messages","text":"The donation tool is prepared to use translations instead of english texts, only. The same system, that allows these translations in the future, can be used to overwrite specific texts in the tool with your own text. This comes in useful, when you have the requirement to show specific information at specific steps, or want to further customise the UI to your community.","title":"Customising messages"},{"location":"message-overrides/#overwriting-message-keys","text":"The donation tool uses a system of unique message keys, that are assigned to an individual place within the application. This key has a default message assigned, which will then presented to the user as the visible text. In order to customise/change a specific message in the tool, you simply overwrite the corresponding message key.","title":"Overwriting message keys"},{"location":"message-overrides/#prepare-overwriting-message-keys-one-time-only","text":"Follow these steps to enable message overwriting: Copy the string_overrides.example.yml file (in the root of the donation tool) Paste it to the root of the donation tool (next to the example file) Rename the file to string_overrides.yml That's it. When you restart the tool the next time, it will use the defined overrides.","title":"Prepare overwriting message keys (one-time only)"},{"location":"message-overrides/#specifying-an-override","text":"To override a specific key, e.g. the one which shows the title when the donator opens the website ( Donate ), do the following: Identify the key to overwrite (more details below), in this case, the key is INFO_TITLE Add this key to the messages object of the string_overrides.yml file Define the new value, e.g. My own text Save the file and restart the tool The resulting file should look like this: messages: INFO_TITLE: My own text","title":"Specifying an override"},{"location":"message-overrides/#identifying-the-message-key","text":"You can find all available/used message keys in the src/translations.ts file (see the messages object). Alternatively, given you know exactly the position/place of the message you want to edit, do the following: Open the config.yml file Add the language key to the app object and use the value qqx (see a full example below) Restart the application Open the website All messages should now, instead of showing their assigned texts, the message keys Navigate to the position of the message you want to overwrite and use the message key (inside the curly brackets) Once you're done, don't forget to delete the language configuration option and restart the app again Example config with the language property: app: port: 8080 sessionSecret: SOME_SECRET sessionStore: filename: ./sessions.sqlite compressResponse: true language: qqx # <- This is what you're looking for The message key you see will also optionally contain a list of parameter names passed to the message. When overwriting the message key, you can use these parameters as well, simply put them at the position you want them with: {{paramName}} . Where paramName is the name of the parameter you want to reference.","title":"Identifying the message key"},{"location":"packages-and-perks/","text":"Packages and Perks The donation tool is composed out of different package options, which grant a possible donator access to a variety of freely configurable perks. Understanding Packages and Perks The concept of packages and perks is a core concept of the donation tool. It is not only the main part the donator will interact with during the donation process. It is also the key element for server hosters to individualise what they offer to donators and what donation amount they expect. Package A package in the donation tool can be seen as a container. It holds the information of a unique ID, in order to reference the package during the donation process, as well as afterwards (e.g. in case of a refund or issue). The package will also has a price tag, which a donator will need to pay. The most important part of a package is a collection (0 or more) of perks, that a donator gets access to when a donation was successful. Important : Never, ever, delete a package from your configuration or change the unique ID of a package, that you already had live at least once. If you want to disable a package, you can create a new one and disable the old one. Packages with a variable price The default setting for a package is, that it has a fixed price tag. That means, a donator can select the package in order to earn the perks of it, but has to donate the fixed amount of money the server hoster defined as a price. Alternatively, the type of the package (with the type parameter in the price object) can be VARIABLE . Setting the price to variable allows your donators to donate an amount they see as appropriate, starting from any positive value greater than 0 (even 0.01). This feature is intended to support packages where you want your donators to donate less amounts then your pre-packages allow. However, keep in mind that the donators will still earn the perks configured for the package, for whatever price they choose, even one cent only. To configure a package with a variable price, which will grant the donator a role in the discord, use this example: packages: - name: 'Perk #1' id: 1 price: type: VARIABLE currency: USD amount: '1.00' perks: - type: DISCORD_ROLE roles: # Donator - '0000000000000' The amount in the price object will be used as a default value in the tet field, which a donator can change. Perk A perk is a single item a donator will be granted when a donation for a package was successful. The perk can grant access to basically everything, depending on if there is an integration/automation provided already. Built-in perks are listed down below in this help article for reference. Each perk, from a point of view of a server hoster, may require different configuration options. Configuring Packages Donation Packages can be configured in the config.yml configuration file in the packages key. It is a list of objects, e.g.: packages: - name: 'Perk #1' id: 1 price: currency: USD amount: '1.00' perks: - tpye: FREETEXT_ONLY text: Some text to show to the donator - name: 'Perk #2' id: 2 price: currency: USD amount: '1.00' perks: - type: PRIORITY_QUEUE amountInDays: 30 cftools: serverApiId: Each package has the following metadata: name : The name of the perk as shown to the donator in various views: The package selection view when a donation starts, as well as on the PayPal receipt. description : An optional freetext field which may contain additional information for your donators about this package. image : An optional image name, which needs to be relative to the src/assets/custom/ directory. Put the image there and then name it here. subscription : When set, will enable this package to be subscribed to by a donator. See the subscriptions documentation for more detailed information. payment : An optional object with additional information for the payment provider (e.g. PayPal): name : Use this name instead of the package name (which is the default) on the payment providers statement and checkout pages. id : A numeric ID to uniquely identify the package in the list of packages over time . This ID shall not be re-used for other packages in the future. Simply count up this number by one whenever you create a new package, without repeating already used ones. disabled : An optional boolean to indicate that this package is not available for donations anymore. See Disabling packages for more information. price : An object of price information, containing the currency and amount . The currency must be one of the supported ones from PayPal . Donators will still be able to donate in their preferred currency, if supported by PayPal. You will, however, get the amount exchanged to the currency listed here. perks : A list of perks the package includes. Each perk consists of a required type parameter and additional configuration, depending on the perk type (see the available perks in the list below) Disabling packages Packages are a basic data model configuration of the donation tool. That means, once a package is configured and was out in the wild (potentially used for a donation already), it is not safe to delete the package again. Deleting a previously available package might result in bugs and undefined behaviour that can decrease the usability and functionality of the donation tool for your donators. Once you have a package configured, which you do not want to provide for donations anymore, you can disable it with the disabled configuration property of the package. Setting this configuration to true instead of deleting the package ensures, that the package is not available for new donations anymore, but the information of the package is still available in the system. Some features may rely on the existence of a package, even when it is not available for donations anymore. Built-in available Perks The following perks are available built-in. Priority Queue The priority queue perk works together with CFTools Cloud. If included in a package and redeemed by a donator, the perk will setup a priority queue slot for a single configured CFTools Cloud server. The priority queue slot will last as long as configured. This perk, in order to work correctly, requires the CFTools Cloud application the be setup. Please see the Getting Started guide, section \"Setup dependent accounts\" -> \"CFTools\", to get more information on how to do that. If you want to grant priority queue access to multiple servers for a package, you may want to configure multiple priority queue perks for that package. Available configuration options Type : PRIORITY_QUEUE This perk requires the following additional configuration options: amountInDays : A number with the amount of days the priority queue slot should be setup for. E.g. 30 for 30 days, or 14 for 14 days and so on. permanent : When set to true , the priority queue slot will never expire (a permanent priority queue). This option overrides the amountInDays option. cftools : An object of required information to work with CFTools Cloud. The only required parameter for now is serverApiId which is the Server Id . You find this ID in the server you want the Priority Queue setup for. Go to Manage -> Settings and look into the API Key section. You may specify an array of multiple Server Ids in the serverApiId property. A donator then needs to select the server they want to have the priority queue on, e.g.: - type: PRIORITY_QUEUE amountInDays: 30 cftools: serverApiId: - A_SERVER_ID - ANOTHER_SERVER_ID Whitelist The whitelist perk works together with CFTools Cloud. If included in a package and redeemed by a donator, the perk will setup a whitelist entry for a single configured CFTools Cloud server. The whitelist will last as long as configured. This perk, in order to work correctly, requires the CFTools Cloud application the be setup. Please see the Getting Started guide, section \"Setup dependent accounts\" -> \"CFTools\", to get more information on how to do that. If you want the donator to be whitelisted on multiple servers for a package, you may want to configure multiple whitelist perks for that package. Available configuration options Type : WHITELIST This perk requires the following additional configuration options: amountInDays : A number with the amount of days the whitelist should be setup for. E.g. 30 for 30 days, or 14 for 14 days and so on. permanent : When set to true , the whitelisting will never expire (a permanent whitelist entry). This option overrides the amountInDays option. cftools : An object of required information to work with CFTools Cloud. The only required parameter for now is serverApiId which is the Server Id . You find this ID in the server you want the Priority Queue setup for. Go to Manage -> Settings and look into the API Key section. Discord role assignment This perk will assign a set of Discord roles to the logged in discord user when a donation was successful. To get the required Discord role ID of the roles you want to get manager, you need to enable the developer mode in your discord app. Then, right-click on the role you want to grant in the role management of the server settings and click copy. Available configuration options Type : DISCORD_ROLE This perk requires the following additional configuration options: roles : A list of strings (not numbers, so please quote the IDs from Discord with ') of the Discord roles you want to give to the donator. amountInDays : (Optional) A number with the amount of days the priority queue slot should be setup for. E.g. 30 for 30 days, or 14 for 14 days and so on. If you omit this option, the roles will be assigned permanently (you can still remove them manually, though). Free text This perk is intended to cover cases, where your donators will receive perks in other, maybe even non-automated, ways. In order to still advertise that donators will get these perks when they donate, you can use this free text perk. When a donator redeems this perk, it will basically do nothing. Available configuration options Type : FREETEXT_ONLY This perk requires the following additional configuration options: text : The text to show to the donator on the package selection page.","title":"Packages and Perks"},{"location":"packages-and-perks/#packages-and-perks","text":"The donation tool is composed out of different package options, which grant a possible donator access to a variety of freely configurable perks.","title":"Packages and Perks"},{"location":"packages-and-perks/#understanding-packages-and-perks","text":"The concept of packages and perks is a core concept of the donation tool. It is not only the main part the donator will interact with during the donation process. It is also the key element for server hosters to individualise what they offer to donators and what donation amount they expect.","title":"Understanding Packages and Perks"},{"location":"packages-and-perks/#package","text":"A package in the donation tool can be seen as a container. It holds the information of a unique ID, in order to reference the package during the donation process, as well as afterwards (e.g. in case of a refund or issue). The package will also has a price tag, which a donator will need to pay. The most important part of a package is a collection (0 or more) of perks, that a donator gets access to when a donation was successful. Important : Never, ever, delete a package from your configuration or change the unique ID of a package, that you already had live at least once. If you want to disable a package, you can create a new one and disable the old one.","title":"Package"},{"location":"packages-and-perks/#packages-with-a-variable-price","text":"The default setting for a package is, that it has a fixed price tag. That means, a donator can select the package in order to earn the perks of it, but has to donate the fixed amount of money the server hoster defined as a price. Alternatively, the type of the package (with the type parameter in the price object) can be VARIABLE . Setting the price to variable allows your donators to donate an amount they see as appropriate, starting from any positive value greater than 0 (even 0.01). This feature is intended to support packages where you want your donators to donate less amounts then your pre-packages allow. However, keep in mind that the donators will still earn the perks configured for the package, for whatever price they choose, even one cent only. To configure a package with a variable price, which will grant the donator a role in the discord, use this example: packages: - name: 'Perk #1' id: 1 price: type: VARIABLE currency: USD amount: '1.00' perks: - type: DISCORD_ROLE roles: # Donator - '0000000000000' The amount in the price object will be used as a default value in the tet field, which a donator can change.","title":"Packages with a variable price"},{"location":"packages-and-perks/#perk","text":"A perk is a single item a donator will be granted when a donation for a package was successful. The perk can grant access to basically everything, depending on if there is an integration/automation provided already. Built-in perks are listed down below in this help article for reference. Each perk, from a point of view of a server hoster, may require different configuration options.","title":"Perk"},{"location":"packages-and-perks/#configuring-packages","text":"Donation Packages can be configured in the config.yml configuration file in the packages key. It is a list of objects, e.g.: packages: - name: 'Perk #1' id: 1 price: currency: USD amount: '1.00' perks: - tpye: FREETEXT_ONLY text: Some text to show to the donator - name: 'Perk #2' id: 2 price: currency: USD amount: '1.00' perks: - type: PRIORITY_QUEUE amountInDays: 30 cftools: serverApiId: Each package has the following metadata: name : The name of the perk as shown to the donator in various views: The package selection view when a donation starts, as well as on the PayPal receipt. description : An optional freetext field which may contain additional information for your donators about this package. image : An optional image name, which needs to be relative to the src/assets/custom/ directory. Put the image there and then name it here. subscription : When set, will enable this package to be subscribed to by a donator. See the subscriptions documentation for more detailed information. payment : An optional object with additional information for the payment provider (e.g. PayPal): name : Use this name instead of the package name (which is the default) on the payment providers statement and checkout pages. id : A numeric ID to uniquely identify the package in the list of packages over time . This ID shall not be re-used for other packages in the future. Simply count up this number by one whenever you create a new package, without repeating already used ones. disabled : An optional boolean to indicate that this package is not available for donations anymore. See Disabling packages for more information. price : An object of price information, containing the currency and amount . The currency must be one of the supported ones from PayPal . Donators will still be able to donate in their preferred currency, if supported by PayPal. You will, however, get the amount exchanged to the currency listed here. perks : A list of perks the package includes. Each perk consists of a required type parameter and additional configuration, depending on the perk type (see the available perks in the list below)","title":"Configuring Packages"},{"location":"packages-and-perks/#disabling-packages","text":"Packages are a basic data model configuration of the donation tool. That means, once a package is configured and was out in the wild (potentially used for a donation already), it is not safe to delete the package again. Deleting a previously available package might result in bugs and undefined behaviour that can decrease the usability and functionality of the donation tool for your donators. Once you have a package configured, which you do not want to provide for donations anymore, you can disable it with the disabled configuration property of the package. Setting this configuration to true instead of deleting the package ensures, that the package is not available for new donations anymore, but the information of the package is still available in the system. Some features may rely on the existence of a package, even when it is not available for donations anymore.","title":"Disabling packages"},{"location":"packages-and-perks/#built-in-available-perks","text":"The following perks are available built-in.","title":"Built-in available Perks"},{"location":"packages-and-perks/#priority-queue","text":"The priority queue perk works together with CFTools Cloud. If included in a package and redeemed by a donator, the perk will setup a priority queue slot for a single configured CFTools Cloud server. The priority queue slot will last as long as configured. This perk, in order to work correctly, requires the CFTools Cloud application the be setup. Please see the Getting Started guide, section \"Setup dependent accounts\" -> \"CFTools\", to get more information on how to do that. If you want to grant priority queue access to multiple servers for a package, you may want to configure multiple priority queue perks for that package.","title":"Priority Queue"},{"location":"packages-and-perks/#available-configuration-options","text":"Type : PRIORITY_QUEUE This perk requires the following additional configuration options: amountInDays : A number with the amount of days the priority queue slot should be setup for. E.g. 30 for 30 days, or 14 for 14 days and so on. permanent : When set to true , the priority queue slot will never expire (a permanent priority queue). This option overrides the amountInDays option. cftools : An object of required information to work with CFTools Cloud. The only required parameter for now is serverApiId which is the Server Id . You find this ID in the server you want the Priority Queue setup for. Go to Manage -> Settings and look into the API Key section. You may specify an array of multiple Server Ids in the serverApiId property. A donator then needs to select the server they want to have the priority queue on, e.g.: - type: PRIORITY_QUEUE amountInDays: 30 cftools: serverApiId: - A_SERVER_ID - ANOTHER_SERVER_ID","title":"Available configuration options"},{"location":"packages-and-perks/#whitelist","text":"The whitelist perk works together with CFTools Cloud. If included in a package and redeemed by a donator, the perk will setup a whitelist entry for a single configured CFTools Cloud server. The whitelist will last as long as configured. This perk, in order to work correctly, requires the CFTools Cloud application the be setup. Please see the Getting Started guide, section \"Setup dependent accounts\" -> \"CFTools\", to get more information on how to do that. If you want the donator to be whitelisted on multiple servers for a package, you may want to configure multiple whitelist perks for that package.","title":"Whitelist"},{"location":"packages-and-perks/#available-configuration-options_1","text":"Type : WHITELIST This perk requires the following additional configuration options: amountInDays : A number with the amount of days the whitelist should be setup for. E.g. 30 for 30 days, or 14 for 14 days and so on. permanent : When set to true , the whitelisting will never expire (a permanent whitelist entry). This option overrides the amountInDays option. cftools : An object of required information to work with CFTools Cloud. The only required parameter for now is serverApiId which is the Server Id . You find this ID in the server you want the Priority Queue setup for. Go to Manage -> Settings and look into the API Key section.","title":"Available configuration options"},{"location":"packages-and-perks/#discord-role-assignment","text":"This perk will assign a set of Discord roles to the logged in discord user when a donation was successful. To get the required Discord role ID of the roles you want to get manager, you need to enable the developer mode in your discord app. Then, right-click on the role you want to grant in the role management of the server settings and click copy.","title":"Discord role assignment"},{"location":"packages-and-perks/#available-configuration-options_2","text":"Type : DISCORD_ROLE This perk requires the following additional configuration options: roles : A list of strings (not numbers, so please quote the IDs from Discord with ') of the Discord roles you want to give to the donator. amountInDays : (Optional) A number with the amount of days the priority queue slot should be setup for. E.g. 30 for 30 days, or 14 for 14 days and so on. If you omit this option, the roles will be assigned permanently (you can still remove them manually, though).","title":"Available configuration options"},{"location":"packages-and-perks/#free-text","text":"This perk is intended to cover cases, where your donators will receive perks in other, maybe even non-automated, ways. In order to still advertise that donators will get these perks when they donate, you can use this free text perk. When a donator redeems this perk, it will basically do nothing.","title":"Free text"},{"location":"packages-and-perks/#available-configuration-options_3","text":"Type : FREETEXT_ONLY This perk requires the following additional configuration options: text : The text to show to the donator on the package selection page.","title":"Available configuration options"},{"location":"roles/","text":"Roles Every user in the donation tool implicitly gets the Donator role, which allows them to: - Make a new donation - Subscribe to a package - Inspect their own donation - View their own subscriptions - Cancel their own subscriptions Additionally, to this implicit role, the donation tool has the following other roles. Role membership is granted based on membership to a specific Discord role within the Discord guild you configure in the discord.bot.guildId configuration option. In order to map a specific Discord role to a donation tool role, add the roleMapping configuration option to the discord option. Then add the role name as a key and the Discord role ID as the value (make sure the role ID is escaped to avoid yaml number encoding issues), like in this example: discord: clientId: '123456789' # ... roleMapping: roleName: '987654321' Following you find a list of roles defined in the donation tool. Only roles that you define in the roleMapping configuration are used in the tool. If you do not define the mapping, then no user will get this role. Auditor To enable this role, use this key in roleMapping : auditor . Members of this role are able to see a statistics of donations made on a monthly basis ( /statistics ).","title":"Roles"},{"location":"roles/#roles","text":"Every user in the donation tool implicitly gets the Donator role, which allows them to: - Make a new donation - Subscribe to a package - Inspect their own donation - View their own subscriptions - Cancel their own subscriptions Additionally, to this implicit role, the donation tool has the following other roles. Role membership is granted based on membership to a specific Discord role within the Discord guild you configure in the discord.bot.guildId configuration option. In order to map a specific Discord role to a donation tool role, add the roleMapping configuration option to the discord option. Then add the role name as a key and the Discord role ID as the value (make sure the role ID is escaped to avoid yaml number encoding issues), like in this example: discord: clientId: '123456789' # ... roleMapping: roleName: '987654321' Following you find a list of roles defined in the donation tool. Only roles that you define in the roleMapping configuration are used in the tool. If you do not define the mapping, then no user will get this role.","title":"Roles"},{"location":"roles/#auditor","text":"To enable this role, use this key in roleMapping : auditor . Members of this role are able to see a statistics of donations made on a monthly basis ( /statistics ).","title":"Auditor"},{"location":"secure-connections/","text":"Serving the donation tool website using a secure connection (https) The donation tool handles some sensitive information, like personal data from your donators, and more importantly, your donators are asked to use PayPal to process a payment. Even though these information are not send directly from the client to the server, some identifiers are, and, of course, the fact that your donators are using the website. It therefore makes sense to protect this information when they get transferred to your server. When you do not configure serving traffic via https, browser may also mark your website as \"Not secure\" when donators open it. To do so, you may want to setup to serve the donation tool website with https using a reverse proxy. As of this guide, we will use the following components: nginx as a reverse proxy web-server Let's Encrypt to automatically obtain and renew a free certificate for your domain Windows as an operating system, it should not differ much when using a Linux/MacOS operating system, though However, you can use whatever webserver or certificate provider you are most familiar with. You may even buy a certificate from a certificate authority of your choice. When using nginx as a webserver and following this guide, please make sure you stop all existing and still listening webservers that listen on port 80 or 443 (or make them listen on other ports). Setup of nginx (the reverse proxy webserver) First, make sure you configure the donation tool to listen on another port than 80 or 443, usually you would take 8080, if this one is still unused on your server You do not (and should not) whitelist this port in your firewall, it is expected to be not reachable from the internet in this configuration scenario, nginx will serve traffic from the donation tool via traffic through localhost If you choose another port than 8080, make sure you change the port in the nginx.conf (see later) Download mainline for Windows from nginx.org Extract the contents (conf, contrib, etc) into the directory of your choice, for this guide we'll use D:\\nginx Open a terminal window ([Win] + [R] -> cmd -> [Enter]) Navigate to the directory D:\\nginx : cd D:\\nginx Start nginx: start nginx.exe Copy the example config nginx.conf (within the directory of this guide) to the conf directory inside the extracted nginx directory Open the configuration file and change the server_name property by replacing localhost with your domain name Reload the configuration of nginx: .\\nginx.exe -s reload Verify that you can open your domain name in the browser, e.g.: http://example.com/.well-known/ (it should respond with a 404 - Not Found) Setup of certbot for issuing a certificate Certbot is a tool that interacts with Let's Encrypts ACME procotol to automatically: * Create a private key * Create a certificate request (CSR) for your domain * Let Let's Encrypt validate that you own your domain * Issue the certificate In order to do that and to install the certificate into nginx, follow these steps: Download certbot from their website Open a new command line window with administrator privileges ([Win] + [R] -> cmd -> right click on command line -> Run with administrator privileges) Run the following command: certbot certonly --webroot and follow the questions on the screen Enter an e-mail address (it does not be one of the domain you want to have a certificate for) Read and accept the terms of service (by pressing Y) Decide if you want to share data with the EFF, which is not a requirement for the certificate creation process Enter the domain name for which you want to run the donation tool, e.g.: donate.example.com Enter the following path for the webroot: D:\\nginx\\html\\ The certificate should be created successfully You can now close this administrator command line Open the directory C:\\Certbot\\live\\yourdomain (replacing yourdomain with your domain), it should contain some files like cert.pem Go back to the configuration file of nginx ( nginx.conf ) and uncomment the last server block (the lines with # ), remove only the hashtags from the beginning of the line Locate the configuration option ssl_certificate and replace cert.pem with the following value: C:/Certbot/live/yourdomain/fullchain.pem , replacing yourdomain with your domain Locate the configuration option ssl_certificate_key and replace key.pem with the following value: C:/Certbot/live/yourdomain/privkey.pem , replacing yourdomain with your domain Go back to the command line and execute the following command: .\\nginx.exe -s reload Open the domain name in your browser, it should automatically redirect to https:// and serve the donation tool Configure automatic certificate renewal Certificates from Let's Encrypt expire after a short period of time, currently 90 days. This is an intended short lifetime, in order to ensure that certificates rotate often for several reasons . Certbot will automatically install a scheduled task to renew your certificates before they expire. However, it can not know what to do in order to install the certificates correctly, after they get renewed. For that, you need to adjust the command so that it will automatically reload the configuration of nginx: Open the \"Scheduled task\" manager of Windows Locate the \"Certbot Renew Task\" scheduled task Open it by double clicking on it Navigate to the \"Actions\" tab Select the only action inside there and press \"Edit\" In the \"Arguments\" input field, add the following content after certbot renew but before the last \" : --deploy-hook 'D:\\nginx\\nginx.exe -s reload' Save the changes by clicking on OK","title":"Setup/Use https/secure connections"},{"location":"secure-connections/#serving-the-donation-tool-website-using-a-secure-connection-https","text":"The donation tool handles some sensitive information, like personal data from your donators, and more importantly, your donators are asked to use PayPal to process a payment. Even though these information are not send directly from the client to the server, some identifiers are, and, of course, the fact that your donators are using the website. It therefore makes sense to protect this information when they get transferred to your server. When you do not configure serving traffic via https, browser may also mark your website as \"Not secure\" when donators open it. To do so, you may want to setup to serve the donation tool website with https using a reverse proxy. As of this guide, we will use the following components: nginx as a reverse proxy web-server Let's Encrypt to automatically obtain and renew a free certificate for your domain Windows as an operating system, it should not differ much when using a Linux/MacOS operating system, though However, you can use whatever webserver or certificate provider you are most familiar with. You may even buy a certificate from a certificate authority of your choice. When using nginx as a webserver and following this guide, please make sure you stop all existing and still listening webservers that listen on port 80 or 443 (or make them listen on other ports).","title":"Serving the donation tool website using a secure connection (https)"},{"location":"secure-connections/#setup-of-nginx-the-reverse-proxy-webserver","text":"First, make sure you configure the donation tool to listen on another port than 80 or 443, usually you would take 8080, if this one is still unused on your server You do not (and should not) whitelist this port in your firewall, it is expected to be not reachable from the internet in this configuration scenario, nginx will serve traffic from the donation tool via traffic through localhost If you choose another port than 8080, make sure you change the port in the nginx.conf (see later) Download mainline for Windows from nginx.org Extract the contents (conf, contrib, etc) into the directory of your choice, for this guide we'll use D:\\nginx Open a terminal window ([Win] + [R] -> cmd -> [Enter]) Navigate to the directory D:\\nginx : cd D:\\nginx Start nginx: start nginx.exe Copy the example config nginx.conf (within the directory of this guide) to the conf directory inside the extracted nginx directory Open the configuration file and change the server_name property by replacing localhost with your domain name Reload the configuration of nginx: .\\nginx.exe -s reload Verify that you can open your domain name in the browser, e.g.: http://example.com/.well-known/ (it should respond with a 404 - Not Found)","title":"Setup of nginx (the reverse proxy webserver)"},{"location":"secure-connections/#setup-of-certbot-for-issuing-a-certificate","text":"Certbot is a tool that interacts with Let's Encrypts ACME procotol to automatically: * Create a private key * Create a certificate request (CSR) for your domain * Let Let's Encrypt validate that you own your domain * Issue the certificate In order to do that and to install the certificate into nginx, follow these steps: Download certbot from their website Open a new command line window with administrator privileges ([Win] + [R] -> cmd -> right click on command line -> Run with administrator privileges) Run the following command: certbot certonly --webroot and follow the questions on the screen Enter an e-mail address (it does not be one of the domain you want to have a certificate for) Read and accept the terms of service (by pressing Y) Decide if you want to share data with the EFF, which is not a requirement for the certificate creation process Enter the domain name for which you want to run the donation tool, e.g.: donate.example.com Enter the following path for the webroot: D:\\nginx\\html\\ The certificate should be created successfully You can now close this administrator command line Open the directory C:\\Certbot\\live\\yourdomain (replacing yourdomain with your domain), it should contain some files like cert.pem Go back to the configuration file of nginx ( nginx.conf ) and uncomment the last server block (the lines with # ), remove only the hashtags from the beginning of the line Locate the configuration option ssl_certificate and replace cert.pem with the following value: C:/Certbot/live/yourdomain/fullchain.pem , replacing yourdomain with your domain Locate the configuration option ssl_certificate_key and replace key.pem with the following value: C:/Certbot/live/yourdomain/privkey.pem , replacing yourdomain with your domain Go back to the command line and execute the following command: .\\nginx.exe -s reload Open the domain name in your browser, it should automatically redirect to https:// and serve the donation tool","title":"Setup of certbot for issuing a certificate"},{"location":"secure-connections/#configure-automatic-certificate-renewal","text":"Certificates from Let's Encrypt expire after a short period of time, currently 90 days. This is an intended short lifetime, in order to ensure that certificates rotate often for several reasons . Certbot will automatically install a scheduled task to renew your certificates before they expire. However, it can not know what to do in order to install the certificates correctly, after they get renewed. For that, you need to adjust the command so that it will automatically reload the configuration of nginx: Open the \"Scheduled task\" manager of Windows Locate the \"Certbot Renew Task\" scheduled task Open it by double clicking on it Navigate to the \"Actions\" tab Select the only action inside there and press \"Edit\" In the \"Arguments\" input field, add the following content after certbot renew but before the last \" : --deploy-hook 'D:\\nginx\\nginx.exe -s reload' Save the changes by clicking on OK","title":"Configure automatic certificate renewal"},{"location":"server-names/","text":"Human-readable server names (CFTools) Your community members most likely know the servers your community provides under specific names. These names are, by default, be some strings unknown to the donation tool. Because of that fact, the tool will use the CFTools Server ID on the website whenever a specific server in CFTools is referenced. In order to make the tool show your specific server names instead of the Server IDs, you can use a configuration option in your config.yml . The serverNames configuration option is a map which maps the CFTools Server ID to the name of your server as your donators will recognize them. For example, let's suppose your community operates two DayZ Servers with the following data: Name: My Awesome Server 1 Server ID: 123-456-789 (Server ID from the CFTools Dashboard -> Manage -> Settings -> API Key section) Name: My Awesome Server 2 Server ID: 987-654-321 (Server ID from the CFTools Dashboard -> Manage -> Settings -> API Key section) You can configure the serverNames mapping as follows: serverNames: 123-456-789: My Awesome Server 1 987-654-321: My Awesome Server 2 The donation tool will, once you restarted the tool, then use the names, My Awesome Server 1 and My Awesome Server 2 , in the visible parts of the website.","title":"Human-readable server names (CFTools)"},{"location":"server-names/#human-readable-server-names-cftools","text":"Your community members most likely know the servers your community provides under specific names. These names are, by default, be some strings unknown to the donation tool. Because of that fact, the tool will use the CFTools Server ID on the website whenever a specific server in CFTools is referenced. In order to make the tool show your specific server names instead of the Server IDs, you can use a configuration option in your config.yml . The serverNames configuration option is a map which maps the CFTools Server ID to the name of your server as your donators will recognize them. For example, let's suppose your community operates two DayZ Servers with the following data: Name: My Awesome Server 1 Server ID: 123-456-789 (Server ID from the CFTools Dashboard -> Manage -> Settings -> API Key section) Name: My Awesome Server 2 Server ID: 987-654-321 (Server ID from the CFTools Dashboard -> Manage -> Settings -> API Key section) You can configure the serverNames mapping as follows: serverNames: 123-456-789: My Awesome Server 1 987-654-321: My Awesome Server 2 The donation tool will, once you restarted the tool, then use the names, My Awesome Server 1 and My Awesome Server 2 , in the visible parts of the website.","title":"Human-readable server names (CFTools)"},{"location":"steam-login/","text":"Steam Login By default, donators using this donation tool needs to login with Discord. While this method is sufficient for most cases, it requires that the donator links their Discord profile with their Steam account when they want to donate for a package that contains a priority queue perk. That is, as this perk needs to know the player identity which is used by the Game server as well, which is not Discord but mostly Steam. If a server hoster does not want to require their donators to connect their Steam account with their Discord profile, they can setup an additional login method with Steam. Doing so will enables two main features: Given the Discord profile does not have a Steam account connected, the donator can additionally login with Steam for the donation tool to get the required Steam account information The donator can change for what Steam account they donate for (this allows to, e.g., use another account then linked with Discord) Pre-requisites In order to be able to setup Steam login for the donation tool, you need to create a Steam API key. You can do that on the Steam WebAPI Key registration page . If you already have a key there, you can not create a second one. Simply use the one which you see there already. Configuration The configuration is straight forward and done in the config.yml file. In the steam object (see the config.example.yml file as a reference) you need to add the following keys: steam: redirectUrl: http://localhost:8080/auth/steam/callback realm: http://localhost:8080 apiKey: Your-Steam-Key The redirect URL corresponds to the same one as for the Discord login ( discord.redirectUrl key), but ends on /auth/steam/callback . Adjust the example value above accordingly. The realm value basically is your domain where the donation tool is hosted under. Insert your API key from the Steam website into the apiKey property.","title":"Setup Additional Steam Login"},{"location":"steam-login/#steam-login","text":"By default, donators using this donation tool needs to login with Discord. While this method is sufficient for most cases, it requires that the donator links their Discord profile with their Steam account when they want to donate for a package that contains a priority queue perk. That is, as this perk needs to know the player identity which is used by the Game server as well, which is not Discord but mostly Steam. If a server hoster does not want to require their donators to connect their Steam account with their Discord profile, they can setup an additional login method with Steam. Doing so will enables two main features: Given the Discord profile does not have a Steam account connected, the donator can additionally login with Steam for the donation tool to get the required Steam account information The donator can change for what Steam account they donate for (this allows to, e.g., use another account then linked with Discord)","title":"Steam Login"},{"location":"steam-login/#pre-requisites","text":"In order to be able to setup Steam login for the donation tool, you need to create a Steam API key. You can do that on the Steam WebAPI Key registration page . If you already have a key there, you can not create a second one. Simply use the one which you see there already.","title":"Pre-requisites"},{"location":"steam-login/#configuration","text":"The configuration is straight forward and done in the config.yml file. In the steam object (see the config.example.yml file as a reference) you need to add the following keys: steam: redirectUrl: http://localhost:8080/auth/steam/callback realm: http://localhost:8080 apiKey: Your-Steam-Key The redirect URL corresponds to the same one as for the Discord login ( discord.redirectUrl key), but ends on /auth/steam/callback . Adjust the example value above accordingly. The realm value basically is your domain where the donation tool is hosted under. Insert your API key from the Steam website into the apiKey property.","title":"Configuration"},{"location":"subscriptions/","text":"Subscriptions Subscriptions is a feature of donation packages, which help donators to donate to a community in a regular, automated manner. When enabled for a package, a donator can subscribe to that package. The price of the package will then be charged to the PayPal account of the donator (which was used to subscribe to the package). Also, the perks included in the package will automatically be redeemed on the behalf of the donator. Subscriptions are currently supported by the following payment providers: * PayPal * Stripe Subscriptions do not work with packages that have perks requiring any other Game ID other than Steam (PlayStation network, XBox). Enabling subscriptions on such packages will result in errors when the subscription is redeemed once paid. Setup of Subscriptions To enable the subscriptions feature for a specific package, you simply need to set the billing cycle for that package, using the subscription configuration key, e.g.: packages: - name: 'Perk #1' subscription: monthly id: 1 # ... As of now, the only available billing cycle for package subscriptions is monthly . Once you restarted the donation tool, it will automatically do the one-time setup. Once this process is finished, the packages with the subscription property set will be available for donators to subscribe to. Detailed information The subscriptions feature heavily relies on the PayPal Webhook feature. For that feature to work, the donation tool needs to be registered as a Webhook target within the PayPal developer portal. The donation tool will attempt to automatically setup this webhook on your behalf. In order for this Webhook to work, the donation tool requires to run with https enabled, as well as on the default port for https websites (443).","title":"Subscriptions"},{"location":"subscriptions/#subscriptions","text":"Subscriptions is a feature of donation packages, which help donators to donate to a community in a regular, automated manner. When enabled for a package, a donator can subscribe to that package. The price of the package will then be charged to the PayPal account of the donator (which was used to subscribe to the package). Also, the perks included in the package will automatically be redeemed on the behalf of the donator. Subscriptions are currently supported by the following payment providers: * PayPal * Stripe Subscriptions do not work with packages that have perks requiring any other Game ID other than Steam (PlayStation network, XBox). Enabling subscriptions on such packages will result in errors when the subscription is redeemed once paid.","title":"Subscriptions"},{"location":"subscriptions/#setup-of-subscriptions","text":"To enable the subscriptions feature for a specific package, you simply need to set the billing cycle for that package, using the subscription configuration key, e.g.: packages: - name: 'Perk #1' subscription: monthly id: 1 # ... As of now, the only available billing cycle for package subscriptions is monthly . Once you restarted the donation tool, it will automatically do the one-time setup. Once this process is finished, the packages with the subscription property set will be available for donators to subscribe to.","title":"Setup of Subscriptions"},{"location":"subscriptions/#detailed-information","text":"The subscriptions feature heavily relies on the PayPal Webhook feature. For that feature to work, the donation tool needs to be registered as a Webhook target within the PayPal developer portal. The donation tool will attempt to automatically setup this webhook on your behalf. In order for this Webhook to work, the donation tool requires to run with https enabled, as well as on the default port for https websites (443).","title":"Detailed information"},{"location":"payments/paypal/","text":"PayPal PayPal.com is a supported payment processor for the donation tool. It is used to process a donation payment to transfer funds from the donator to your community. Setup PayPal account To automatically process a transaction from a donator, you need to register a REST Api app in the PayPal developer portal. Do so by following these steps: Open the developer.paypal.com page in your internet browser Login by clicking the top right Login to dashboard link and use your PayPal login credentials You should see your dashboard with an overview of your apps and credentials In the REST Api apps section, click the Create App button You can choose between an app on the sandbox partition of PayPal, in order to test out this tool before using it In order to process donations of your donators, you need an app in the Live partition of PayPal (you can switch with the buttons under the My apps & credentials title) Open the apps overview page by clicking on the apps name Note down the Client ID and the Secret value, you'll need these values in the \"Configuration\" Configure PayPal The PayPal configuration in the config.yml all reside in the paypal key: paypal: # The environment of PayPal which match to the credentials you configure in the next settings. If you use sandbox # credentials, use 'sandbox', if you use live credentials, use 'production'. # Allowed values: sandbox, production environment: sandbox # The access credentials of your PayPal application to process payments. You can either use the sandbox credentials # to test the application. In order to process real funds, you need to have a paypal business account and use # credentials of a live app. # You can create these in the PayPal developer portal: https://developer.paypal.com/developer/applications/ clientId: clientSecret:","title":"PayPal"},{"location":"payments/paypal/#paypal","text":"PayPal.com is a supported payment processor for the donation tool. It is used to process a donation payment to transfer funds from the donator to your community.","title":"PayPal"},{"location":"payments/paypal/#setup-paypal-account","text":"To automatically process a transaction from a donator, you need to register a REST Api app in the PayPal developer portal. Do so by following these steps: Open the developer.paypal.com page in your internet browser Login by clicking the top right Login to dashboard link and use your PayPal login credentials You should see your dashboard with an overview of your apps and credentials In the REST Api apps section, click the Create App button You can choose between an app on the sandbox partition of PayPal, in order to test out this tool before using it In order to process donations of your donators, you need an app in the Live partition of PayPal (you can switch with the buttons under the My apps & credentials title) Open the apps overview page by clicking on the apps name Note down the Client ID and the Secret value, you'll need these values in the \"Configuration\"","title":"Setup PayPal account"},{"location":"payments/paypal/#configure-paypal","text":"The PayPal configuration in the config.yml all reside in the paypal key: paypal: # The environment of PayPal which match to the credentials you configure in the next settings. If you use sandbox # credentials, use 'sandbox', if you use live credentials, use 'production'. # Allowed values: sandbox, production environment: sandbox # The access credentials of your PayPal application to process payments. You can either use the sandbox credentials # to test the application. In order to process real funds, you need to have a paypal business account and use # credentials of a live app. # You can create these in the PayPal developer portal: https://developer.paypal.com/developer/applications/ clientId: clientSecret:","title":"Configure PayPal"},{"location":"payments/refunds/","text":"Refunds Completed payments may be refunded by the payment provider (either by an action of the payment receiver/payment account owner, or by a technical reason). The donation tool, once it gets the notification about a donation being refunded, will try to refund the perks assigned to the donator automatically. However, refunding needs to be supported by the perk and might be done on a best-guess basis, depending on if the perk can identify that a specific allowed advantage was setup as a result of this donation. For example, the priority queue perk can, with a pretty good confidence, evaluate if a priority queue for a specific user was created by a specific donation or not. Only, if the donation which setup the priority queue, is also the one which is refunded, the donation tool will remove the priority queue. Otherwise, the priority queue slot will be kept untouched. This might be the case when the donator donated a second time some days after the first time, and when the first donation got refunded by the payment provider. On the other hand, the discord role perk is not able to evaluate if a role of a user was setup by a specific donation. In this case, the role will be removed from the user when any donation (which contains the discord role perk) gets refunded. The donator may, in this case, open the still valid donation in their donation history and redeem the perks again in order to gain the role again. Note that refunds are currently only supported by the payment Provider PayPal","title":"Refunds"},{"location":"payments/refunds/#refunds","text":"Completed payments may be refunded by the payment provider (either by an action of the payment receiver/payment account owner, or by a technical reason). The donation tool, once it gets the notification about a donation being refunded, will try to refund the perks assigned to the donator automatically. However, refunding needs to be supported by the perk and might be done on a best-guess basis, depending on if the perk can identify that a specific allowed advantage was setup as a result of this donation. For example, the priority queue perk can, with a pretty good confidence, evaluate if a priority queue for a specific user was created by a specific donation or not. Only, if the donation which setup the priority queue, is also the one which is refunded, the donation tool will remove the priority queue. Otherwise, the priority queue slot will be kept untouched. This might be the case when the donator donated a second time some days after the first time, and when the first donation got refunded by the payment provider. On the other hand, the discord role perk is not able to evaluate if a role of a user was setup by a specific donation. In this case, the role will be removed from the user when any donation (which contains the discord role perk) gets refunded. The donator may, in this case, open the still valid donation in their donation history and redeem the perks again in order to gain the role again. Note that refunds are currently only supported by the payment Provider PayPal","title":"Refunds"},{"location":"payments/stripe/","text":"Stripe.com Stripe.com is a payment processor with a wide variety of payment options available. You can configure available payment options in the Stripe.com dashboard and activate and deactivate payment methods of your choice. However, while the payment processing should be the same for most of the payments, we suggest to use payment methods which allow an instant payment confirmation, only (such as credit card, giropay, SOFORT, etc.). While payment methods, where a confirmation might be pending for several hours or days might work just fine as well, they were not tested and may lead in a less optimal flow for your donators. They might need to refresh the Donation payment pending page multiple times throughout the time until a payment is confirmed. Setup You need to register an account with stripe.com. Do so by following the registration form on their website: https://dashboard.stripe.com/ You will need to give the account, you want to choose for the donation tool, an account name. This name will be displayed on the checkout page for the donator when they do a payment. After creating an account, you need to activate your account on the Stripe.com dashboard. The steps to complete the activation may be different depending on the country you reside in, but should be pretty straight forward. Keep in mind, that you can not transfer actual funds from donators as long as the account is not activated. Configure Stripe.com The Stripe.com configuration in the config.yml all reside in the stripe key: stripe: # The secret key of your stripe.com account (Developers -> API Keys -> Secret Key). secretKey: sk_...","title":"Stripe.com"},{"location":"payments/stripe/#stripecom","text":"Stripe.com is a payment processor with a wide variety of payment options available. You can configure available payment options in the Stripe.com dashboard and activate and deactivate payment methods of your choice. However, while the payment processing should be the same for most of the payments, we suggest to use payment methods which allow an instant payment confirmation, only (such as credit card, giropay, SOFORT, etc.). While payment methods, where a confirmation might be pending for several hours or days might work just fine as well, they were not tested and may lead in a less optimal flow for your donators. They might need to refresh the Donation payment pending page multiple times throughout the time until a payment is confirmed.","title":"Stripe.com"},{"location":"payments/stripe/#setup","text":"You need to register an account with stripe.com. Do so by following the registration form on their website: https://dashboard.stripe.com/ You will need to give the account, you want to choose for the donation tool, an account name. This name will be displayed on the checkout page for the donator when they do a payment. After creating an account, you need to activate your account on the Stripe.com dashboard. The steps to complete the activation may be different depending on the country you reside in, but should be pretty straight forward. Keep in mind, that you can not transfer actual funds from donators as long as the account is not activated.","title":"Setup"},{"location":"payments/stripe/#configure-stripecom","text":"The Stripe.com configuration in the config.yml all reside in the stripe key: stripe: # The secret key of your stripe.com account (Developers -> API Keys -> Secret Key). secretKey: sk_...","title":"Configure Stripe.com"},{"location":"payments/vat/","text":"Value-added tax (VAT) Depending on your country of residency, your own tax model and other factors, you may be required to pay taxes for donations you receive through the donation tool website. Please consult with your tax consultant in order to check your requirement to collect taxes for donations. It is out of scope of this documentation to elaborate on the need to collecting taxes. The server donation tool supports collecting taxes for european countries as of now. To get the current tax rates for EU countries, the tool uses VATStack . You need to register with them before you can enable tax support in the donation tool. The developer plan should generally be enough, however, check for individual requirements before selecting the plan. Once done, simply enable tax support in the configuration: vats: enabled: true vatStack: publicKey: pk_... While the value of publicKey is the value of your public API key from the VATStack dashboard . Restart the server donation tool, and it will start collecting taxes for your european donators. In order to collect the correct tax rate from your donators, the donation tool will ask the donator about where they live.","title":"Taxes"},{"location":"payments/vat/#value-added-tax-vat","text":"Depending on your country of residency, your own tax model and other factors, you may be required to pay taxes for donations you receive through the donation tool website. Please consult with your tax consultant in order to check your requirement to collect taxes for donations. It is out of scope of this documentation to elaborate on the need to collecting taxes. The server donation tool supports collecting taxes for european countries as of now. To get the current tax rates for EU countries, the tool uses VATStack . You need to register with them before you can enable tax support in the donation tool. The developer plan should generally be enough, however, check for individual requirements before selecting the plan. Once done, simply enable tax support in the configuration: vats: enabled: true vatStack: publicKey: pk_... While the value of publicKey is the value of your public API key from the VATStack dashboard . Restart the server donation tool, and it will start collecting taxes for your european donators. In order to collect the correct tax rate from your donators, the donation tool will ask the donator about where they live.","title":"Value-added tax (VAT)"}]}